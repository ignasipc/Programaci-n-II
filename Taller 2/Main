/**
 * Fecha inicio: 11/05/2024
 * Fecha fin: 14/05/2024
 *
 * @author Ignasi Paredes
 */

package Taller2_clases_parciales;

public class Main {
    public static void main(String[] args) {
        new Main().metodoPrincipal();
    }
    
    private final String nombreFicheroArticulos = "articles.dat";
    private final String nombreFicheroIndices = "indices.dat";
    private static int POSICIONMASALTA;
    private static boolean fin = false;
    
    public void metodoPrincipal(){
        
        //Creamos el fichero de índices asociados a los artículos
        crearFicheroIndices();
        
        while(!fin){
            menu();
            
            switch(LT.readInt()){
                case 1 ->{ //Dar de alta un registro
                    altaRegistro();
                }
                case 2 ->{ //Leer un registro a partir de su código, no hay búsqueda, directamente con el índice nos dice su posición
                    leerRegistro();
                }
                case 3 ->{ //Modificar un registro a partir de su código, no podemos modificar el booleano borrado ni el código
                    modificarRegistro();
                }
                case 4 ->{ //Eliminar un registro a partir de su código el booleano del article, pero NO modificamos su posición en el índice (no cambiamos a -1)
                    eliminarRegistro();
                }
                case 5 ->{ //Listar todos los registros por orden de código, mirando su booleano
                    listarRegistros();
                }
                case 6 ->{ //Listar todos los artículos del archivo aleatorio articles.dat con el orden que tienen en el archivo
                    listarTodoElFichero();
                }
                case 7 ->{
                    fin = true;
                }
                //Listar todos los objetos Índice del fichero de índices (Para pruebas)
//                case 8 ->{
//                    IndexFicherosInOut ficheroIndices = new IndexFicherosInOut(nombreFicheroIndices);
//                    Index indice;
//                    for (int i = 1; i < 9999; i++) {
//                        indice = ficheroIndices.lectura(i);
//                        System.out.println(indice.toString());
//                    }
//                }
            }
        }
    }
    
    //Método que crea el fichero de índices con Códigos del 1 al 9999 y con las posiciones del artículo asociado
    public void crearFicheroIndices(){
        IndexFicherosInOut ficheroIndices = new IndexFicherosInOut(nombreFicheroIndices);
        ArticleFicherosInOut ficheroArticulos = new ArticleFicherosInOut(nombreFicheroArticulos);
        
        //Leemos el primer objeto del fichero, si existe (no es null), quiere decir que el fichero
        //ya ha sido creado en otra ejecución, por tanto no hace falta crearlo de nuevo
        Index indice;
        indice = ficheroIndices.lectura();
        if(indice==null){
            //Creamos 9999 objetos índice, desde Código 1 hasta Codigo 9999 y los vamos metiendo en el fichero de índices
            for (int i = 1; i < 10000; i++) {
                //Creamos el objeto índice
                indice = new Index(i,-1);
                //Insertamos el objeto en el fichero
                ficheroIndices.escritura(indice);
            }
        }
        
        //Secuencialmente relacionamos cada artículo leído del fichero con su respectivo índex.
        //Con una relación Código del Artículo <=> Cídigo del Índice y junto al código del índice,
        //la posición del artículo en el fichero
        Article articulo = ficheroArticulos.lecturaArticle();
        int posicion = 1;
        while(articulo != null){
            //Lo relacionamos con su índice
            indice = new Index(articulo.getCodigo(), posicion);
            ficheroIndices.escritura(indice,articulo.getCodigo());
            posicion++;
            
            //Leemos el siguiente artículo
            articulo = ficheroArticulos.lecturaArticle();
        }
        
        //Asignamos a POSICIONMASALTA el valor de la posición más alta existente del fichero
        POSICIONMASALTA = posicion;
        
        //Cerramos los ficheros
        ficheroIndices.cierre();
        ficheroArticulos.cierre();
    }
    
    //Método que crea un nuevo registro en el fichero de Artículos y lo asocia al fichero de Índices que
    //le corresponda
    public void altaRegistro(){
        IndexFicherosInOut ficheroIndices = new IndexFicherosInOut(nombreFicheroIndices);
        ArticleFicherosInOut ficheroArticulos = new ArticleFicherosInOut(nombreFicheroArticulos);
        
        //Limpiamos la pantalla
        limpiarPantalla();
        
        //Pedimos por teclado un objeto Article, y mientras el código escrito ya exista
        //volveremos a pedir al usuario un objeto Article por teclado
        Article articulo = null;
        while(articulo==null){
            articulo = obtenerArticuloPorTeclado(ficheroArticulos);
        }
        
        //Escribimos en la posición más alta, el nuevo registro y aumentamos POSICIONMASALTA
        ficheroArticulos.escritura(articulo);
        
        //Asociamos su código a la posición
        Index indice = new Index(articulo.getCodigo(),POSICIONMASALTA);
        ficheroIndices.escritura(indice,articulo.getCodigo());
        
        POSICIONMASALTA++;
        
        //Cerramos los ficheros
        ficheroIndices.cierre();
        ficheroArticulos.cierre();
    }
    
    //Método que devuelve un objeto Article introducido por teclado
    public Article obtenerArticuloPorTeclado(ArticleFicherosInOut ficheroArticulos){
        Article articulo;
        try{
            //Pedimos al usuario los datos del nuevo registro
            //Pedimos el código
            System.out.print("Introduce el código: ");
            int codigo = LT.readInt();
                //Si ha escrito una cantidad fuera del rango [1,9999], lanzamos una excepcion
                if((codigo<1)||(codigo>9999)){
                    throw new EntradaIncorrecta("EL CÓDIGO TIENE QUE ESTAR COMPRENDIDO ENTRE 1 y 9999");
                }

            //Leemos de manera secuencial en el fichero de artículos si ya existe el código dado
            articulo = ficheroArticulos.lecturaArticle();
            while(articulo != null){
                //Si ya existe, lanzamos una excepción
                if(articulo.getCodigo()==codigo){
                    throw new EntradaIncorrecta("ESTE CÓDIGO YA EXISTE");
                }
                //Leemos el siguiente artículo
                articulo = ficheroArticulos.lecturaArticle();
            }

            //Pedimos la descripcion
            System.out.print("Introduce la descripción: ");
            String descripcion = LT.readLine();
                //Si no ha escrito nada, lanzamos una excepción
                if(descripcion.equals("")){
                    throw new EntradaIncorrecta("TIENES QUE RELLENAR EL CAMPO DESCRIPCIÓN");
                }
            

            //Pedimos la cantidad
            System.out.print("Introduce la cantidad: ");
            int cantidad = LT.readInt();
                //Si ha escrito una cantidad menor a 0, lanzamos una excepción
                if(cantidad<0){
                    throw new EntradaIncorrecta("LA CANTIDAD NO PUEDE SER NEGATIVA");
                }
            
            articulo = new Article(codigo, descripcion, cantidad,false);
        }catch(EntradaIncorrecta | NumberFormatException error){
            System.err.println(error.toString());
            return null;
        }
        
        return articulo;
    }
    
    //Método que lee un registro a partir de un código escrito por teclado
    public void leerRegistro(){
        IndexFicherosInOut ficheroIndices = new IndexFicherosInOut(nombreFicheroIndices);
        ArticleFicherosInOut ficheroArticulos = new ArticleFicherosInOut(nombreFicheroArticulos);
        
        //Limpiamos la pantalla
        limpiarPantalla();
        
        try {
            //Pedimos por teclado el código del objeto Article que el usuario quiere buscar
            System.out.print("Introduce el código del artículo que desea buscar: ");
            int codigoABuscar = LT.readInt();
            
            //Si es un código válido [1,9999]
            if((codigoABuscar>=1)&&(codigoABuscar<=9999)){
                //Leemos el objeto Índex del fichero, con posición = el código dado por el usuario
                Index indice = ficheroIndices.lectura(codigoABuscar);
                
                //Si la posición no es -1, vamos a buscar el objeto Artículo con la posición guardada en el Índex
                if(indice.getPosicion()!=-1){
                    //Leemos el artículo con la posición guardada en el objeto Índex
                    Article articulo = ficheroArticulos.lecturaArticle((int)indice.getPosicion());
                    //Limpiamos la pantalla
                    limpiarPantalla();
                    //Mostramos por pantalla el objeto buscado
                    System.out.println(articulo.toString());
                    
                    //Cerramos los ficheros
                    ficheroIndices.cierre();
                    ficheroArticulos.cierre();
        
                    //No volvemos al menú hasta que el usuario pulsa ENTER ("Pausamos" la ejecución)
                    pausa();
                }else{
                    //Si la posición asociada es -1, no existe un articulo con ese código, lanzamos una excepción
                    throw new EntradaIncorrecta("NO EXISTE UN ARTICLE CON ESTE CÓDIGO");
                }
            }else{
                //Si el código no esta en el rango [1,9999], lanzamos una excepción
                throw new EntradaIncorrecta("ESTE CÓDIGO NO EXISTE");
            }
        } catch (EntradaIncorrecta error) {
            //Mostramos el mensaje de error
            System.err.println(error.toString());
            
            //Cerramos los ficheros
            ficheroIndices.cierre();
            ficheroArticulos.cierre();
        
            //No volvemos al menú hasta que el usuario pulsa ENTER ("Pausamos" la ejecución)
            pausa();
        }
    }
    
    //Método que modifica un registro a partir de su codigo
    public void modificarRegistro(){
        IndexFicherosInOut ficheroIndices = new IndexFicherosInOut(nombreFicheroIndices);
        ArticleFicherosInOut ficheroArticulos = new ArticleFicherosInOut(nombreFicheroArticulos);
        Article articulo;
        
        //Limpiamos la pantalla
        limpiarPantalla();
        
        try {
            //Pedimos por teclado el código del objeto Article que el usuario quiere modificar
            System.out.print("Introduce el codigo del artículo que desea modificar: ");
            int codigoABuscar = LT.readInt();
            
            //Si es un código válido [1,9999]
            if((codigoABuscar>=1)&&(codigoABuscar<=9999)){
                //Leemos el objeto Índex del fichero, con posición = el código dado por el usuario
                Index indice = ficheroIndices.lectura(codigoABuscar);
                int posicion = (int) indice.getPosicion();
                
                //Si la posición no es -1, vamos a buscar el objeto Artículo con la posición guardada en el Índex
                if(posicion!=-1){
                    //Leemos el artículo con la posición guardada en el objeto Índex
                    articulo = ficheroArticulos.lecturaArticle(posicion);
                    
                    //Limpiamos la pantalla
                    limpiarPantalla();
                    //Mostramos por pantalla el objeto que desea modificar
                    System.out.println(articulo.toString()+"\n");
                    
                    //Pedimos la descripción
                    System.out.print("Introduce la nueva descripción: ");
                    String descripcion = LT.readLine();
                        //Si no ha escrito nada, lanzamos una excepcion
                        if(descripcion.equals("")){
                            throw new EntradaIncorrecta("TIENES QUE RELLENAR EL CAMPO DESCRIPCIÓN");
                        }

                    //Pedimos la cantidad
                    System.out.print("Introduce la nueva cantidad: ");
                    int cantidad = LT.readInt();
                        //Si ha escrito una cantidad menor a 0, lanzamos una excepción
                        if(cantidad<0){
                            throw new EntradaIncorrecta("LA CANTIDAD NO PUEDE SER NEGATIVA");
                        }

                    articulo = new Article(articulo.getCodigo(), descripcion, cantidad,articulo.getBorrado());

                    ficheroArticulos.escritura(articulo, posicion);
                    
                    //Cerramos los ficheros
                    ficheroIndices.cierre();
                    ficheroArticulos.cierre();
                    
                    //No volvemos al menú hasta que el usuario pulsa ENTER ("Pausamos" la ejecución)
                    pausa();
                }else{
                    //Si la posición asociada es -1, no existe un artículo con ese código, lanzamos una excepción
                    throw new EntradaIncorrecta("NO EXISTE UN ARTICLE CON ESTE CÓDIGO");
                }
            }else{
                //Si el código no esta en el rango [1,9999], lanzamos una excepción
                throw new EntradaIncorrecta("ESTE CÓDIGO NO EXISTE");
            }
        } catch (EntradaIncorrecta error) {
            //Mostramos el mensaje de error
            System.err.println(error.toString());
            
            //Cerramos los ficheros
            ficheroIndices.cierre();
            ficheroArticulos.cierre();
            
            //No volvemos al menú hasta que el usuario pulsa ENTER ("Pausamos" la ejecución)
            pausa();
        }
    }
    
    //Método que elimina un registro a partir de su codigo
    public void eliminarRegistro(){
        IndexFicherosInOut ficheroIndices = new IndexFicherosInOut(nombreFicheroIndices);
        ArticleFicherosInOut ficheroArticulos = new ArticleFicherosInOut(nombreFicheroArticulos);
        Article articulo;
        
        //Limpiamos la pantalla
        limpiarPantalla();
        
        try {
            //Pedimos por teclado el código del objeto Artícle que el usuario quiere eliminar
            System.out.print("Introduce el codigo del artículo que desea eliminar: ");
            int codigoABuscar = LT.readInt();
            
            //Si es un codigo válido [1,9999]
            if((codigoABuscar>=1)&&(codigoABuscar<=9999)){
                //Leemos el objeto Índex del fichero, con posición = el código dado por el usuario
                Index indice = ficheroIndices.lectura(codigoABuscar);
                int posicion = (int) indice.getPosicion();
                
                //Si la posición no es -1, vamos a buscar el objeto Artículo con la posición guardada en el Índex
                if(posicion!=-1){
                    //Leemos el articulo con la posición guardada en el objeto Índex
                    articulo = ficheroArticulos.lecturaArticle(posicion);
                    
                    //Limpiamos la pantalla
                    limpiarPantalla();
                    //Mostramos por pantalla el objeto que desea eliminar
                    System.out.println(articulo.toString()+"\n");

                    articulo = new Article(articulo.getCodigo(), articulo.getDescripcion(), articulo.getCantidad(),true);

                    ficheroArticulos.escritura(articulo, posicion);
                    
                    //Cerramos los ficheros
                    ficheroIndices.cierre();
                    ficheroArticulos.cierre();
                    
                    System.out.println("El elemento ha sido eliminado\n");
                    
                    //No volvemos al menú hasta que el usuario pulsa ENTER ("Pausamos" la ejecución)
                    pausa();
                }else{
                    //Si la posición asociada es -1, no existe un artículo con ese código, lanzamos una excepción
                    throw new EntradaIncorrecta("NO EXISTE UN ARTICLE CON ESTE CÓDIGO");
                }
            }else{
                //Si el código no esta en el rango [1,9999], lanzamos una excepción
                throw new EntradaIncorrecta("ESTE CÓDIGO NO EXISTE");
            }
        } catch (EntradaIncorrecta error) {
            //Mostramos el mensaje de error
            System.err.println(error.toString());
            
            //Cerramos los ficheros
            ficheroIndices.cierre();
            ficheroArticulos.cierre();
            
            //No volvemos al menú hasta que el usuario pulsa ENTER ("Pausamos" la ejecución)
            pausa();
        }
    }
    
    //Método que lista todos los registros (no eliminados) del fichero por orden
    //de codigo de menor a mayor
    public void listarRegistros(){
        IndexFicherosInOut ficheroIndices = new IndexFicherosInOut(nombreFicheroIndices);
        ArticleFicherosInOut ficheroArticulos = new ArticleFicherosInOut(nombreFicheroArticulos);
        
        //Limpiamos la pantalla
        limpiarPantalla();
        
        //Leemos todos los objetos Índex del fichero de manera secuencial
        Index indice;
        Article articulo;
        for (int i = 1; i < 10000; i++) {
            indice = ficheroIndices.lectura(i);
            
            //Si el atributo de posición del objeto Índices es diferente a -1 existe un artículo con ese código
            if(indice.getPosicion()!=-1){
                //Si su posición no es -1, leemos el artículo del fichero cuya posición está indicada
                //en el objeto índice asociado
                articulo = ficheroArticulos.lecturaArticle((int)indice.getPosicion());
                
                //Si el artículo NO ha sido borrado de manera lógica
                if(!articulo.getBorrado()){
                    //Mostramos por pantalla el Article leído sin el booleano
                    System.out.println("\n"+articulo.toStringSinBooleano());
                }
            }
        }
        
        //Cerramos los ficheros
        ficheroIndices.cierre();
        ficheroArticulos.cierre();
        
        //No volvemos al menú hasta que el usuario pulsa ENTER ("Pausamos" la ejecución)
        pausa();
    }
    
    //Método que muestra todos los objetos Article contenidos en el fichero "articles.dat" 
    //en el orden secuencial (Los borrados incluidos)
    public void listarTodoElFichero(){
        ArticleFicherosInOut ficheroArticulos = new ArticleFicherosInOut(nombreFicheroArticulos);
        
        //Limpiamos la pantalla
        limpiarPantalla();
        
        //Lectura de todos los articulos
        Article articulo = ficheroArticulos.lecturaArticle();
        while(articulo != null){
            //Mostramos por pantalla el artículo
            System.out.println("\n"+articulo.toString());
            articulo = ficheroArticulos.lecturaArticle();
        }
        
        //Cerramos el fichero
        ficheroArticulos.cierre();
        
        //No volvemos al menú hasta que el usuario pulsa ENTER ("Pausamos" la ejecución)
        pausa();
    }
    
    //Método que muestra por pantalla todas las opciones del menú
    public void menu(){
        limpiarPantalla();
        System.out.print("--------------- MENÚ ---------------\n"
                + "\n[1] -> Dar de alta un registro"
                + "\n[2] -> Leer un registro a partir de su código"
                + "\n[3] -> Modificar un registro a partir de su código"
                + "\n[4] -> Eliminar un registro a partir de su código"
                + "\n[5] -> Listar todos los registros por orden de código"
                + "\n[6] -> Listar todos los artículos del archivo aleatorio articles.dat con el orden que tienen en el archivo"
                + "\n[7] -> Salir"
                + "\n\nIntroduce una opción: ");
    }
    
    //Método que "limpia" la pantalla dejando muy arriba el anterior contenido
    public void limpiarPantalla(){
        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    }
    
    //Método que crea una pausa del programa hasta que el usuario pulsa ENTER
    public void pausa(){
        System.out.print("\nPULSA ENTER PARA CONTINUAR: ");
        LT.readChar();
    }
}
